{"version":3,"sources":["Battleships.js","Player.js","components/Header.js","components/GameBoard.js","components/Game.js","App.js","index.js"],"names":["Ship","name","size","direction","ship","hitState","Array","fill","hit","nextHit","findIndex","field","isSunk","includes","GameBoard","playerSide","gameBoard","side","board","ships","shipCount","isReady","isGameOver","emptyBoard","makeBoard","getShips","starFighter","starFighter2","superStarFighter","superStarFighter2","starDestroyer","superStarDestroyer","shipArray","push","map","id","changeShipDirection","receiveAttack","xCord","yCord","isLegalMove","Number","isInteger","parseInt","shipId","attackedShip","console","log","markShipArea","checkGameOver","checkPlacement","isLegalPlace","j","Y","i","X","placeShip","forEach","cell","onBoard","coordinates","mark","placeShipsAtRandom","reversedShips","reverse","randomlyPlaceShip","randX","Math","ceil","random","randY","Player","type","player","isWinner","isMakingMove","makeMove","opponent","makeAIMove","legal","passMove","hasWon","CreatePlayer","boardLightSide","Board","boardDarkSide","Header","props","className","href","icon","PlayerBoard","setPlayerBoard","OpponentBoard","setOpponentBoard","onAIMove","setMoveCount","moveCount","table","arr","toString","element","data-cord","src","alt","onClick","e","y","target","dataset","cord","split","x","onMakeMove","React","memo","Game","PlayerOne","PlayerOneBoard","setP1Board","PlayerTwo","PlayerTwoBoard","setP2Board","App","useState","clear","library","add","fab","fas","faTrash","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb909526.chunk.js","sourcesContent":["// Spaceships:\r\n// star fighters: (TIE-fighter, x-wing, y-wing)\r\n// (shuttle, star-fighter, bomber, destroyer, magister-destroyer)\r\n// https://starwars.fandom.com/wiki/Starfighter/Legends\r\n// \r\n// ships images visible on sides of boardgames\r\n// ship damaged => ember gif on the ship image\r\n// ship destroyed => red opacity\r\n// lose/win => different icon appearing \r\n// Battleship.Proto\r\n\r\n\r\nexport const Ship = (name, size, direction = \"horizontal\") => {\r\n  const ship = {\r\n    name,\r\n    size,\r\n    direction,\r\n    hitState: Array(size).fill(\"o\"),\r\n    hit:  () => {\r\n      let nextHit = ship.hitState.findIndex(field => field === 'o');\r\n      ship.hitState[nextHit] = \"hit\"\r\n    },\r\n    isSunk: () => !ship.hitState.includes(\"o\")\r\n  }\r\n  return ship\r\n}\r\n\r\n\r\nexport const GameBoard = (playerSide) => {\r\n  const gameBoard = {\r\n    side: playerSide,\r\n    board: [],\r\n    ships: [],\r\n    shipCount: 0,\r\n    isReady: false,\r\n    isGameOver: false,\r\n\r\n    emptyBoard: () => {\r\n      return [\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n        ['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\r\n      ];\r\n    },\r\n    makeBoard: () => {gameBoard.board = gameBoard.emptyBoard()},\r\n    getShips: (playerSide) => {\r\n      let shipArray = [];\r\n      let starFighter, starFighter2\r\n      let superStarFighter, superStarFighter2\r\n      let starDestroyer\r\n      let superStarDestroyer\r\n      if (playerSide === 'dark') {\r\n        starFighter = Ship('TIE-fighter', 1);\r\n        starFighter2 = Ship('TIE-fighter', 1);\r\n        superStarFighter = Ship('TIE-bomber', 2);\r\n        superStarFighter2 = Ship('TIE-bomber', 2);\r\n        starDestroyer = Ship('Star Destroyer', 3);\r\n        superStarDestroyer = Ship('Super Star Destroyer', 4);\r\n        shipArray.push(starFighter, starFighter2, superStarFighter, superStarFighter2, starDestroyer, superStarDestroyer)\r\n      } else {\r\n        starFighter = Ship('Shuttle', 1);\r\n        starFighter2 = Ship('Shuttle', 1);\r\n        superStarFighter = Ship('X-wing', 2);\r\n        superStarFighter2 = Ship('X-wing', 2);\r\n        starDestroyer = Ship('Rebel heavy ship', 3);\r\n        superStarDestroyer = Ship('Rebel Super Ship', 4);\r\n        shipArray.push(starFighter, starFighter2, superStarFighter, superStarFighter2, starDestroyer, superStarDestroyer)\r\n      }\r\n      shipArray.map((ship, id) => ship.id = id + 1);\r\n      gameBoard.ships = shipArray;\r\n      return shipArray\r\n    },\r\n    changeShipDirection: (ship) => {\r\n      (ship.direction === 'horizontal') ?\r\n      ship.direction = 'vertical' :\r\n      ship.direction = 'horizontal'\r\n    },\r\n    receiveAttack: (xCord, yCord) => {\r\n      let isLegalMove = true;\r\n      if (gameBoard.board[yCord - 1][xCord - 1] === '_' ||\r\n          gameBoard.board[yCord - 1][xCord - 1] === '*') {\r\n            gameBoard.board[yCord - 1][xCord - 1] = '•'\r\n        // if is a ship\r\n      } else if (Number.isInteger(\r\n        parseInt(gameBoard.board[yCord - 1][xCord - 1]))) { \r\n        // pass a hit to ship\r\n        let shipId = parseInt(gameBoard.board[yCord - 1][xCord - 1]);\r\n        let attackedShip = gameBoard.ships[shipId - 1];\r\n        attackedShip.hit()\r\n        console.log(`hit a ship, field number: ${shipId}, attacked id: ${attackedShip.id}`)\r\n        gameBoard.board[yCord - 1][xCord - 1] = '※'\r\n        \r\n        if (attackedShip.isSunk()) {\r\n          console.log(`${attackedShip.name} was destroyed`)\r\n          gameBoard.markShipArea('•', attackedShip)\r\n          gameBoard.shipCount--\r\n          gameBoard.checkGameOver()\r\n          if (gameBoard.isGameOver === true) {\r\n            console.log('Game Over')\r\n          }\r\n        }\r\n      } else {\r\n        console.log('NOT A LEGAL MOVE')\r\n        isLegalMove = false\r\n      }\r\n      if (isLegalMove) { // && !isGameOver\r\n        console.log('move was legal...' )\r\n        // pass a turn\r\n      }\r\n      return isLegalMove\r\n    },\r\n\r\n    checkPlacement:  (ship, xCord, yCord) => {\r\n      // X, Y - coords to be checked\r\n      let isLegalPlace = true\r\n      if (ship.direction === 'horizontal') {\r\n        if (ship.size + xCord -1 > 10) isLegalPlace = false\r\n        for (let j = 0; j < 3; j++ ) {\r\n          let Y = yCord - 2 + j\r\n          if (0 <= Y && Y <= 9) {\r\n            for (let i = 0; i < ship.size + 2; i++) {\r\n              let X = xCord - 2 + i\r\n              if (0 <= X && X <= 9) {\r\n                if (gameBoard.board[Y][X] !== '_') {\r\n                  isLegalPlace = false\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else if (ship.direction === 'vertical') {\r\n        if (ship.size + yCord -1 > 10) isLegalPlace = false\r\n        for (let j = 0; j < 3; j++ ) {\r\n          let X = xCord - 2 + j\r\n          if (0 <= X && X <= 9) {\r\n            for (let i = 0; i < ship.size + 2; i++) {\r\n              let Y = yCord - 2 + i\r\n              if (0 <= Y && Y <= 9) {\r\n                if (gameBoard.board[Y][X] !== '_') {\r\n                  isLegalPlace = false\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      (isLegalPlace? console.log('legal place') : console.log('Illegal place!'))\r\n      return isLegalPlace\r\n    },\r\n\r\n    placeShip: (ship, xCord, yCord) => {\r\n      // yCord - row cord (array)\r\n      // xCord - column cord (array element)\r\n      if (gameBoard.checkPlacement(ship, xCord, yCord)) {\r\n      if (ship.direction === 'horizontal') {\r\n        ship.hitState.forEach((cell, i) => {\r\n          gameBoard.board[yCord - 1][xCord - 1 + i] = `${ship.id}`\r\n        });\r\n      } else if (ship.direction === 'vertical') {\r\n       ship.hitState.forEach((cell, i) => {\r\n         gameBoard.board[yCord - 1 + i][xCord - 1] = `${ship.id}`\r\n       });\r\n      }\r\n      gameBoard.markShipArea('*', ship, xCord, yCord)\r\n      ship.onBoard = true\r\n      ship.coordinates = [xCord, yCord];\r\n      console.log(`${ship.name} was placed ${ship.direction} on ${ship.coordinates}`);\r\n      gameBoard.shipCount++\r\n      if (gameBoard.shipCount === 6) {\r\n        gameBoard.isReady = true;\r\n      }\r\n      }\r\n    },\r\n\r\n    markShipArea: (mark, ship, xCord = ship.coordinates[0], yCord =  ship.coordinates[1]) => {\r\n      ship.hitState.forEach((cell, i) => {\r\n        if (ship.direction === 'horizontal') {\r\n          // horizontal areas\r\n          if (yCord < 10) {\r\n            gameBoard.board[yCord][xCord - 1 + i] = `${mark}`\r\n          }\r\n          if (yCord > 1) {\r\n            gameBoard.board[yCord - 2][xCord - 1 + i] = `${mark}`\r\n          }\r\n          // vertical areas\r\n          if (xCord > 1) {\r\n            if (yCord > 1) {\r\n              gameBoard.board[yCord - 2][xCord - 2] = `${mark}`} \r\n              gameBoard.board[yCord - 1][xCord - 2] = `${mark}`\r\n            if (yCord < 10) {\r\n              gameBoard.board[yCord][xCord - 2] = `${mark}`}\r\n            }\r\n          \r\n          if (xCord + ship.size < 10) {\r\n            if (yCord > 1) {\r\n              gameBoard.board[yCord - 2][xCord - 1 + ship.size] = `${mark}`}\r\n              gameBoard.board[yCord - 1][xCord - 1 + ship.size] = `${mark}`\r\n            if (yCord < 10) {\r\n              gameBoard.board[yCord][xCord - 1 + ship.size] = `${mark}`} \r\n          }\r\n        } else if (ship.direction === 'vertical') {\r\n         if (xCord < 10) {\r\n           gameBoard.board[yCord - 1 + i][xCord] = `${mark}`\r\n         }\r\n         if (xCord > 1) {\r\n           gameBoard.board[yCord - 1 + i][xCord - 2] = `${mark}`\r\n         }\r\n         // horizontal areas\r\n         if (yCord > 1) {\r\n           if (xCord > 1) {\r\n             gameBoard.board[yCord - 2][xCord - 2] = `${mark}`} \r\n           gameBoard.board[yCord - 2][xCord - 1] = `${mark}`\r\n           if (xCord < 10) {\r\n             gameBoard.board[yCord - 2][xCord] = `${mark}`}\r\n           }\r\n         if (yCord + ship.size < 10) {\r\n           if (xCord > 1) {\r\n             gameBoard.board[yCord- 1 + ship.size][xCord- 2] = `${mark}` }\r\n           gameBoard.board[yCord- 1 + ship.size][xCord - 1] = `${mark}`\r\n           if (xCord < 10)\r\n            {gameBoard.board[yCord- 1 + ship.size][xCord] = `${mark}`} \r\n         }\r\n        }\r\n      })  \r\n    },\r\n\r\n    placeShipsAtRandom: () => {\r\n      let reversedShips = [...gameBoard.ships].reverse()\r\n      while (gameBoard.shipCount < 6) {\r\n        reversedShips.forEach((ship) => {\r\n          gameBoard.randomlyPlaceShip(ship);\r\n        })\r\n      }\r\n    },\r\n\r\n    randomlyPlaceShip: (ship) => {\r\n      if (ship.onBoard !== true) {\r\n        let randX = Math.ceil(Math.random() * 10);\r\n        let randY = Math.ceil(Math.random() * 10);\r\n        if (Math.random() * 2 > 1) gameBoard.changeShipDirection(ship)\r\n        gameBoard.placeShip(ship, randX, randY)\r\n        gameBoard.randomlyPlaceShip(ship)\r\n      }\r\n    },\r\n    checkGameOver: () => {\r\n       console.log(\"Game over? \", (gameBoard.shipCount === 0));\r\n      if (gameBoard.shipCount === 0) {\r\n        gameBoard.isGameOver = true;\r\n        return true\r\n      }\r\n        return false\r\n    }\r\n  }\r\n  return gameBoard\r\n}\r\n","import { GameBoard as Board } from './Battleships';\r\n\r\nexport const Player = (name, side, type = \"human\", gameBoard) => {\r\n  const player = {\r\n    name,\r\n    side,\r\n    type,\r\n    gameBoard,\r\n    isWinner: false,\r\n    isMakingMove: false,\r\n    makeMove: (opponent, xCord, yCord) => {\r\n      let legal = opponent.gameBoard.receiveAttack(xCord, yCord);\r\n      if (legal) {\r\n        opponent.gameBoard.receiveAttack(xCord, yCord)\r\n        // player.passMove(opponent) \r\n        return true\r\n      } else\r\n      return false\r\n    },\r\n    makeAIMove: (opponent) => {\r\n      let randX = Math.ceil(Math.random() * 10);\r\n      let randY = Math.ceil(Math.random() * 10);\r\n      let legal = opponent.gameBoard.receiveAttack(randX, randY);\r\n      console.log(randX, randY, legal);\r\n      if (legal) {\r\n        opponent.gameBoard.receiveAttack(randX, randY)\r\n        console.log(opponent.gameBoard)\r\n        // player.passMove(opponent) \r\n        return true\r\n      } else {\r\n        player.makeAIMove(opponent)\r\n      }\r\n    },\r\n    passMove: (opponent) => {\r\n      player.isMakingMove = false;\r\n      opponent.isMakingMove = true;\r\n    },\r\n\r\n    hasWon: (board) => {\r\n      // opposite board\r\n     (board.isGameOver === true) ? player.isWinner = true :\r\n      player.isWinner = false\r\n    }\r\n  }\r\n  return player\r\n}\r\n\r\nexport const CreatePlayer = (side, type) => {\r\n  if (side === 'light') {\r\n    let boardLightSide = Board('light side');\r\n    boardLightSide.makeBoard();\r\n    boardLightSide.getShips();\r\n    boardLightSide.placeShipsAtRandom();\r\n    return Player('Jedi Master', side, type, boardLightSide);\r\n  }\r\n  if (side === 'dark') {\r\n    let boardDarkSide = Board('dark side');\r\n    boardDarkSide.makeBoard();\r\n    boardDarkSide.getShips('dark');\r\n    boardDarkSide.placeShipsAtRandom();\r\n    return Player('Lord Sith', side, type, boardDarkSide);\r\n  }\r\n}","import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"header\" >\r\n            <div className=\"header-row\">\r\n                <h1 className=\"col-sm-8\"><span className=\"title1\">SpaceShips </span> </h1>\r\n                <a href=\"https://github.com/wblachut/react-project-battleships\" className=\"gh-btn\">\r\n                <FontAwesomeIcon icon={[\"fab\", \"github\"]} className=\"gh-icon\" />\r\n                  </a><i className=\"fab fa-github\"></i>\r\n            </div>\r\n                <nav>\r\n                </nav>\r\n        </header>        \r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\r\n\r\nconst GameBoard = (props) => {\r\n const {player,\r\n  PlayerBoard,\r\n  setPlayerBoard,\r\n  opponent,\r\n  OpponentBoard,\r\n  setOpponentBoard, setMoveCount, moveCount\r\n } = props\r\n// on outer side column with ships - on destroy add fire gif\r\n// if player show ships\r\n// add onClick function with \r\n// use different cursor eg. aim (find info on net)\r\n\r\nconst onMakeMove = (e) => {\r\n  // console.log(e.target.dataset.cord.split(',')[1])\r\n  const y = e.target.dataset.cord.split(',')[0];\r\n  const x = e.target.dataset.cord.split(',')[1];\r\n  // console.log(x, y)\r\n  opponent.makeMove(player, x, y)\r\n  // console.table(player.gameBoard.board)\r\n  setPlayerBoard(player.gameBoard.board)\r\n  // setMoveCount(moveCount+1)\r\n  console.table(PlayerBoard)\r\n  console.log(setPlayerBoard)\r\n  onAIMove();\r\n} \r\n\r\nconst onAIMove = () => {\r\n  player.makeAIMove(opponent)\r\n  setOpponentBoard(opponent.gameBoard.board)\r\n  console.table(OpponentBoard)\r\n}\r\n\r\n    return (\r\n      <div className={`${player.side} gameBoard`}>\r\n          <div className={`${player.side} side-title`}> The {player.side} side </div>\r\n          <div className=\"board-wrapper\">\r\n          <div className=\"column-description\">\r\n            {PlayerBoard.map((arr, i) => {\r\n             return <div className=\"numbers\" key={[i+1]}> {[i + 1]}  </div> })}\r\n          </div> \r\n          <div className=\"inner-wrapper\">\r\n            <div className={`${player.side} row-description`}> {PlayerBoard.map((arr, i) => {\r\n              return <div className=\"letters\" key={`letter${i}`}> {(i + 10).toString(36)} </div> })}</div>\r\n\r\n              {/* grid */}\r\n            <div className={`${player.side} grid-wrapper`}>\r\n              {PlayerBoard.map((arr, j) =>\r\n               arr.map((element, i) => {\r\n                if (player.type === 'human') {\r\n                  if (element === '_' || element === '*') {\r\n                    return <div className=\"cell\"\r\n                      data-cord={[(j+1), (i+1)]}\r\n                      key={[j+1, i+1]}>\r\n                    </div>\r\n                  } else if ( (Number.isInteger(parseInt(element))) ) {\r\n                    return <div className={`cell ship ship${element}`}\r\n                      data-cord={[j+1, i+1]}\r\n                      key={[j+1, i+1]}>\r\n                    </div>\r\n                  } else if (element === '※') {\r\n                    return <div className={`cell hit ship`} data-cord={[j+1, i+1]} key={[j+1, i+1]}> \r\n                    <img src=\"./images/flame.gif\" alt=\"aj\"/>\r\n                    </div>\r\n                  } else  {\r\n                    return <div className={`cell empty`} data-cord={[j+1, i+1]} key={[j+1, i+1]}> •\r\n                    </div>\r\n                  }\r\n                }\r\n                // ai board\r\n                else {\r\n                  // add different displays to different element vals: fire to ※, empty to  •\r\n                  if (element === '•') {\r\n                    return <div className=\"cell empty\" data-cord={[(j+1), (i+1)]}\r\n                    key={[j+1, i+1]} > • </div>\r\n                  } else if (element === '※') {\r\n                    return <div className=\"cell hit\"\r\n                     data-cord={[(j+1), (i+1)]} key={[j+1, i+1]} >\r\n                       <img src=\"./images/flame.gif\" alt=\"a\"/>\r\n                    </div>\r\n                  } else {\r\n                  return <div className=\"cell\" data-cord={[(j+1), (i+1)]}\r\n                  key={[j+1, i+1]}\r\n                  onClick={(e) => onMakeMove(e)}> </div> }\r\n                }\r\n              } ))} </div>\r\n            </div>\r\n        </div>\r\n      </div>        \r\n    )\r\n}\r\n\r\nexport default React.memo(GameBoard)\r\n","import React from \"react\";\r\nimport '../style/Game.css'\r\nimport GameBoard from './GameBoard'\r\n// import '.gif'\r\n\r\nconst Game = (props) => {\r\n    return (\r\n      <div className=\"game\">\r\n          <GameBoard \r\n            {...props}\r\n            player = {props.PlayerOne}\r\n            PlayerBoard = {props.PlayerOneBoard}\r\n            setPlayerBoard = {props.setP1Board}\r\n            opponent = {props.PlayerTwo}\r\n            OpponentBoard = {props.PlayerTwoBoard}\r\n            setOpponentBoard = {props.setP2Board} />\r\n          <GameBoard \r\n            {...props}\r\n            player = {props.PlayerTwo}\r\n            opponent = {props.PlayerOne} \r\n            OpponentBoard = {props.PlayerOneBoard}\r\n            setOpponentBoard = {props.setP1Board}\r\n            PlayerBoard = {props.PlayerTwoBoard}\r\n            setPlayerBoard = {props.setP2Board}\r\n            setMoveCount = {props.setMoveCount}\r\n            moveCount = {props.moveCount}\r\n             />\r\n      </div>        \r\n    )\r\n}\r\n\r\nexport default Game\r\n","import React, { useState } from \"react\";\n// import { GameBoard as Board } from './Battleships';\n// import { Player } from './Player'\nimport { CreatePlayer } from './Player'\n\nimport Header from \"./components/Header\";\nimport Intro from \"./components/Intro\";\nimport NewGame from \"./components/NewGame\";\nimport Game from \"./components/Game\";\nimport \"./style/App.css\";  \n\nconst App = () => {\n  let PlayerOne = CreatePlayer('light', 'human')\n  let PlayerTwo = CreatePlayer('dark', 'computer')\n  const [PlayerOneBoard, setP1Board] = useState(PlayerOne.gameBoard.board)\n  const [PlayerTwoBoard, setP2Board] = useState(PlayerTwo.gameBoard.board)\n  console.clear()\n  const [moveCount, setMoveCount] = useState(0)\n\n    return (\n      <div>\n        <Header/>\n        {/* <Intro /> */}\n        {/* <NewGame /> */}\n        <Game \n         PlayerOne = {PlayerOne}\n         PlayerTwo = {PlayerTwo}\n         PlayerOneBoard = {PlayerOneBoard}\n         PlayerTwoBoard = {PlayerTwoBoard}\n         setP1Board = {setP1Board}\n         setP2Board = {setP2Board}\n        />\n        <div className=\"stars\"></div>\n        <div className=\"twinkling\"></div>\n      </div>\n    );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './style/night-sky.css';  \nimport App from './App';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(fab, fas, faTrash);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}